name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - dev

jobs:
  create-dot-env:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Create .env file
      run: |
        echo "NEXT_PUBLIC_BASE_URL=${{ secrets.BASE_URL }}" >> .env
        echo "NEXT_PUBLIC_EMAIL_USER=${{ secrets.EMAIL_USER }}" >> .env
        echo "NEXT_PUBLIC_EMAIL_PASS=${{ secrets.EMAIL_PASS }}" >> .env 
    - name: Verify .env file exists
      run: ls -la
    - name: Show .env file contents
      run: cat .env
    - name: Upload .env file
      uses: actions/upload-artifact@v4
      with:
        include-hidden-files: true
        name: dot-env
        path: .env

  lint-and-build:
    needs: create-dot-env
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    - name: Download .env file
      uses: actions/download-artifact@v4
      with:
        name: dot-env
        path: .
    - run: npm install
    - run: npm run build
    - name: Debug build output
      run: |
        echo "Root directory contents:"
        ls -la
        echo "Content of .next directory:"
        ls -la .next/
        echo "Content of .next/standalone directory:"
        ls -la .next/standalone/ || echo "standalone directory not found"
        echo "Content of .next/static directory:"
        ls -la .next/static/ || echo "static directory not found"
    - uses: actions/upload-artifact@v4
      with:
        name: build
        path: |
          .next/**/*
          public/**/*
          package.json
        include-hidden-files: true

  deploy:
    needs: lint-and-build
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - name: Setup SSH Key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.AZURE_SERVER_SSH_KEY }}
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: build
        path: build
    - name: Show directory contents
      run: |
        echo "Content of build directory:"
        ls -la build
        echo "Content of source .next directory:"
        ls -la .next/ || echo ".next not found in root"
        echo "Creating .next directory structure"
        mkdir -p build/.next/standalone
        mkdir -p build/.next/static
        mv build/standalone/* build/.next/standalone/ || echo "No standalone files"
        mv build/static/* build/.next/static/ || echo "No static files"
        echo "Final build/.next structure:"
        ls -la build/.next/
    - name: Deploy to Azure
      env:
        AZURE_SERVER_USER: ${{ secrets.AZURE_SERVER_USER }}
        AZURE_SERVER_IP: ${{ secrets.AZURE_SERVER_IP }}
      run: |
        NEW_VERSION=$(echo ${{ github.ref }} | sed 's/refs\/tags\/v//')
        ssh -o StrictHostKeyChecking=no $AZURE_SERVER_USER@$AZURE_SERVER_IP "mkdir -p ~/gebeta-remade/releases/$NEW_VERSION"

        # Create required directories on remote
        ssh -o StrictHostKeyChecking=no $AZURE_SERVER_USER@$AZURE_SERVER_IP "mkdir -p ~/gebeta-remade/releases/$NEW_VERSION/.next/static"

        # Copy the standalone server and its files
        scp -o StrictHostKeyChecking=no -r build/.next/standalone/* $AZURE_SERVER_USER@$AZURE_SERVER_IP:~/gebeta-remade/releases/$NEW_VERSION/
        
        # Copy static files to the correct location
        scp -o StrictHostKeyChecking=no -r build/.next/static/* $AZURE_SERVER_USER@$AZURE_SERVER_IP:~/gebeta-remade/releases/$NEW_VERSION/.next/static/
        
        # Copy public files
        scp -o StrictHostKeyChecking=no -r build/public/* $AZURE_SERVER_USER@$AZURE_SERVER_IP:~/gebeta-remade/releases/$NEW_VERSION/public/
        
        # Copy package.json
        scp -o StrictHostKeyChecking=no build/package.json $AZURE_SERVER_USER@$AZURE_SERVER_IP:~/gebeta-remade/releases/$NEW_VERSION/
        
        # Update the symlink
        ssh -o StrictHostKeyChecking=no $AZURE_SERVER_USER@$AZURE_SERVER_IP "ln -sfn ~/gebeta-remade/releases/$NEW_VERSION ~/gebeta-remade/current"
        
        # Restart the PM2 process (if you're using PM2)
        ssh -o StrictHostKeyChecking=no $AZURE_SERVER_USER@$AZURE_SERVER_IP "cd ~/gebeta-remade/current && pm2 reload gebeta-app || pm2 start ecosystem.config.js"
